#!/bin/bash

# Compilation
./compile

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Répertoire des JAR
LIB_DIR="libraries"

# Fichiers JAR nécessaires
JUNIT_JAR="$LIB_DIR/junit-4.13.1.jar"
EASYMOCK_JAR="$LIB_DIR/easymock-5.4.0.jar"
HAMCREST_JAR="$LIB_DIR/hamcrest-core-1.3.jar"

# Emplacement des classes compilées
BIN_DIR="bin"

# Exécution des tests JUnit
echo -e "${BLUE}Exécution des tests JUnit...${NC}"

# Recherche des classes de test dans le package src/tests
test_classes=$(find "$BIN_DIR" -name "*Test.class" | sed 's/bin\///;s/\.class//;s/\//./g')

# Exécution des tests JUnit avec org.junit.runner.JUnitCore
for test_class in $test_classes; do
    echo -e "${YELLOW}Running test: $test_class${NC}"
    java -cp "$BIN_DIR:$JUNIT_JAR:$EASYMOCK_JAR:$HAMCREST_JAR" org.junit.runner.JUnitCore "$test_class"
    if [ $? -ne 0 ]; then
        echo -e "${RED}Échec du test : $test_class${NC}"
        exit 1
    fi
done

echo -e "${GREEN}Tous les tests JUnit sont passés avec succès${NC}"

# Exécution des scénarios de tests personnalisés si nécessaire
echo -e "${BLUE}Exécution des scénarios de tests personnalisés...${NC}"

# Liste des scénarios de tests à exécuter
test_cases=(
    "-mess 10"                       # Test avec un message aléatoire de 10 bits
    "-mess 1010101"                  # Test avec un message fixe
    "-mess 0010011 -form NRZ"          # Test avec codage NRZ
    "-mess 0010011 -form RZ"          # Test avec codage RZ
    "-mess 0010011 -form NRZT"          # Test avec codage NRZT
    "-ampl -5 5 -form NRZT"    # Test avec des amplitudes
    "-mess 50 -seed 1234"            # Test avec une seed spécifique
    "-mess 1001110011100110001111000011110001110000011100000111000011110000111110000000000"  # Message long
    "-mess 1000000"                  # Test avec un message d'un million de bits

    "-mess 1010101 -snrpb 0.1"       # SNR par bit très faible
    "-mess 110011 -snrpb 50"         # SNR par bit élevé

    "-mess 0010011 -form NRZ -snrpb 30"  # SNR par bit avec format NRZ
    "-mess 0010011 -form NRZ -snrpb 0"  # SNR par bit avec format NRZ
    "-mess 0010011 -form NRZ -snrpb -30"  # SNR par bit avec format NRZ
    "-mess 0010011 -form RZ -snrpb -30"    # SNR par bit avec format RZ
    "-mess 0010011 -form RZ -snrpb 0"    # SNR par bit avec format RZ
    "-mess 0010011 -form RZ -snrpb 30"    # SNR par bit avec format RZ
    "-mess 0010011 -form NRZT -snrpb -30"    # SNR par bit avec format NRZT
    "-mess 0010011 -form NRZT -snrpb 0"    # SNR par bit avec format NRZT
    "-mess 0010011 -form NRZT -snrpb 30"    # SNR par bit avec format NRZT

    "-ampl -3 3 -form NRZT -snrpb 30"  # SNR par bit avec amplitudes personnalisées
)

# Si on n'est pas dans un pipeline GitLab (la variable d'environnement CI n'est pas définie)
if [ -z "$CI" ]; then
    test_cases+=(
        "-s -form NRZT -ampl -4 4"
        "-s -seed 27 -form RZ -ampl 0 6"
        "-s -mess 12 -seed 1234 -form NRZ -ampl -5 5"
        "-s -mess 01101101110 -form NRZT"
        "-s -mess 01101101110 -form NRZ -snrpb 30"
        "-s -mess 01101101110 -form NRZT -snrpb 30"
        "-s -mess 01101101110 -form RZ -snrpb 30"
    )
fi

# Initialisation du compteur d'échecs
failed_tests=0

# Boucle sur les scénarios de tests
for test_case in "${test_cases[@]}"; do
    echo -e "${YELLOW}Exécution du test : ./simulateur $test_case${NC}"
    ./simulateur $test_case
    if [ $? -ne 0 ]; then
        echo -e "${RED}Échec du test : $test_case${NC}"
        ((failed_tests++))
    else
        echo -e "${GREEN}Test réussi : $test_case${NC}"
    fi
done

# Résumé des résultats des tests
if [ "$failed_tests" -ne 0 ]; then
    echo -e "\n${RED}$failed_tests tests échoués sur ${#test_cases[@]}${NC}"
    exit 1
else
    echo -e "${GREEN}Tous les tests sont passés avec succès${NC}"
fi
