#!/bin/bash

# Répertoire des JAR
LIB_DIR="libraries"

# Fichiers JAR nécessaires
JUNIT_JAR="$LIB_DIR/junit-4.13.1.jar"
EASYMOCK_JAR="$LIB_DIR/easymock-5.4.0.jar"
HAMCREST_JAR="$LIB_DIR/hamcrest-core-1.3.jar"

# Emplacement des classes compilées
BIN_DIR="bin"

# Exécution des tests JUnit
echo "Exécution des tests JUnit..."

# Recherche des classes de test dans le package src/tests
test_classes=$(find "$BIN_DIR" -name "*Test.class" | sed 's/bin\///;s/\.class//;s/\//./g')

# Exécution des tests JUnit avec org.junit.runner.JUnitCore
for test_class in $test_classes; do
    echo "Running test: $test_class"
    java -cp "$BIN_DIR:$JUNIT_JAR:$EASYMOCK_JAR:$HAMCREST_JAR" org.junit.runner.JUnitCore "$test_class"
    if [ $? -ne 0 ]; then
        echo "Échec du test : $test_class"
        exit 1
    fi
done

echo "Tous les tests JUnit sont passés avec succès"

# Exécution des scénarios de tests personnalisés si nécessaire
echo "Exécution des scénarios de tests personnalisés..."

# Liste des scénarios de tests à exécuter
test_cases=(
    "-mess 101000101"
    "-seed 1234"
)

# Si on n'est pas dans un pipeline GitLab (la variable d'environnement CI n'est pas définie)
if [ -z "$CI" ]; then
    test_cases+=(
      "-s -code NRZT"
      "-s -seed 27 -code RZ"
      "-s -mess 12 -seed 1234 -code NRZ"
      "-s -mess 01101101110 -code NRZT"
    )
fi

# Initialisation du compteur d'échecs
failed_tests=0

# Boucle sur les scénarios de tests
for test_case in "${test_cases[@]}"; do
    ./simulateur "$test_case"
    if [ $? -ne 0 ]; then
        echo "Échec du test : $test_case"
        ((failed_tests++))
    fi
done

# Résumé des résultats des tests
if [ "$failed_tests" -ne 0 ]; then
    echo -e "\n$failed_tests tests échoués sur ${#test_cases[@]}"
    exit 1
else
    echo "Tous les tests sont passés avec succès"
fi
