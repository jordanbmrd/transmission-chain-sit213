#!/bin/bash

# Compilation
./compile

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Répertoire des JAR
LIB_DIR="libraries"
BIN_DIR="bin"

# Recherche tous les fichiers JAR dans le répertoire libraries
JAR_FILES=$(find "$LIB_DIR" -name "*.jar" | tr '\n' ':')

# Exécution des tests JUnit
echo -e "${BLUE}Exécution des tests JUnit...${NC}"

# Recherche des classes de test dans le package src/tests
test_classes=$(find "$BIN_DIR" -name "*Test.class" | sed 's/bin\///;s/\.class//;s/\//./g')

# Exécution des tests JUnit avec org.junit.runner.JUnitCore
for test_class in $test_classes; do
    echo -e "${YELLOW}Running test: $test_class${NC}"
    java -cp "$BIN_DIR:$JAR_FILES" org.junit.runner.JUnitCore "$test_class"
    if [ $? -ne 0 ]; then
        echo -e "${RED}Échec du test : $test_class${NC}"
        exit 1
    fi
done

echo -e "${GREEN}Tous les tests JUnit sont passés avec succès${NC}"

# Fonction pour shuffle les args (utilise regex pour éviter de considérer les valeurs négatives comme argument)
shuffle_args() {
    local args=("$@")
    local grouped_args=()
    local current_group=()

    # Parcours des arguments et regroupement clé-valeur ou clé seule
    for arg in "${args[@]}"; do
        if [[ "$arg" == -* ]] && ! [[ "$arg" =~ ^-[0-9]+ ]]; then
            # Si on est sur une nouvelle clé, on stocke le groupe actuel
            if [ ${#current_group[@]} -gt 0 ]; then
                grouped_args+=("${current_group[*]}")
            fi
            # Démarrer un nouveau groupe avec la clé actuelle
            current_group=("$arg")
        else
            # Ajouter la valeur à la clé en cours (y compris les valeurs négatives)
            current_group+=("$arg")
        fi
    done

    # Ajouter le dernier groupe au tableau
    if [ ${#current_group[@]} -gt 0 ]; then
        grouped_args+=("${current_group[*]}")
    fi

    # Mélange des groupes d'arguments
    for (( i=${#grouped_args[@]}-1; i>0; i-- )); do
        j=$((RANDOM % (i+1)))
        tmp=${grouped_args[i]}
        grouped_args[i]=${grouped_args[j]}
        grouped_args[j]=$tmp
    done

    echo "${grouped_args[@]}"
}

# Exécution des scénarios de tests personnalisés
echo -e "${BLUE}Exécution des scénarios de tests personnalisés...${NC}"

# Liste des scénarios de tests à exécuter (tests normaux)
test_cases=(
    "-mess 10"
    "-mess 1010101"
    "-mess 0010011 -form NRZ"
    "-mess 0010011 -form RZ"
    "-mess 0010011 -form NRZT"
    "-ampl -5 5 -form NRZT"
    "-mess 50 -seed 1234"
    "-mess 1001110011100110001111000011110001110000011100000111000011110000111110000000000"
    "-mess 1000000"
    "-mess 1010101 -snrpb 0.1"
    "-mess 110011 -snrpb 50"
    "-mess 0010011 -form NRZ -snrpb 30"
    "-mess 0010011 -form NRZ -snrpb 0"
    "-mess 0010011 -form NRZ -snrpb -30"
    "-mess 0010011 -form RZ -snrpb -30"
    "-mess 0010011 -form RZ -snrpb 0"
    "-mess 0010011 -form RZ -snrpb 30"
    "-mess 0010011 -form NRZT -snrpb -30"
    "-mess 0010011 -form NRZT -snrpb 0"
    "-mess 0010011 -form NRZT -snrpb 30"
    "-ampl -3 3 -form NRZT -snrpb 30"
    "-mess 0010011 -ti 60 0.3"
    "-mess 0010011 -ti 0 1.0"
    "-mess 0010011 -ti 100 0.75 20 0.4"
    "-mess 0010011 -ti 100 0.9 20 0.6 40 0.5"
    "-mess 0010011 -ti 100 1.0 20 0.75 5 0.5 80 0.1 120 0.8"
    "-mess 0010011 -form NRZT -codeur -nbEch 20 -ampl -4 4 -ti 3 0.4"
    "-mess 01101101110 -form NRZ -codeur -nbEch 25 -ampl -2 2 -snrpb 9 -ti 4 0.3 6 0.2"
    "-mess 100111001 -form RZ -codeur -nbEch 30 -snrpb -10 -ti 5 0.5"
    "-mess 110011 -form NRZT -codeur -nbEch 15 -snrpb -6 -ti 2 0.6"
    "-mess 1010 -form RZ -codeur -nbEch 35 -ampl 0 1 -snrpb 3 -ti 4 0.3 8 0.1"
    "-mess 0010011 -form NRZ -codeur -nbEch 40 -ampl -10 10 -ti 5 0.2 70 0.4"
    "-mess 110011 -form RZ -codeur -nbEch 22 -snrpb 0"
    "-mess 01101101110 -form NRZT -codeur -nbEch 50 -snrpb 6 -ti 20 0.4 70 0.3 90 0.2"
    "-mess 30 -form NRZT -codeur -nbEch 28 -ampl -5 5 -snrpb -2 -ti 15 0.5 6 0.2 30 0.8"
    "-mess 1010 -form NRZT -codeur -nbEch 18 -ampl -3 7 -snrpb 4 -ti 2 0.3"
)

# Si on n'est pas dans un pipeline GitLab (la variable d'environnement CI n'est pas définie)
if [ -z "$CI" ]; then
    test_cases+=(
        "-s -form NRZT -ampl -4 4"
        "-s -seed 27 -form RZ -ampl 0 6"
        "-s -mess 12 -seed 1234 -form NRZ -ampl -5 5"
        "-s -mess 01101101110 -form NRZT"
        "-s -mess 01101101110 -form NRZ -snrpb 30"
        "-s -mess 01101101110 -form NRZT -snrpb 30"
        "-s -mess 01101101110 -form RZ -snrpb 30"
        "-s -mess 01101101110 -form RZ -ti 100 1.0 20 0.75 5 0.5 80 0.1 120 0.8"
        "-s -mess 250 -form NRZT -codeur -nbEch 15 -snrpb -6 -ti 2 0.6"
        "-s -mess 35 -form RZ -codeur -nbEch 35 -snrpb 3 -ti 4 0.3 8 0.1"
        "-s -mess 001011000011 -form NRZ -codeur -nbEch 40 -ampl -5 5 -ti 5 0.2 70 0.4"
    )
fi

# Initialisation du compteur d'échecs
failed_tests=0

# Boucle sur les scénarios de tests, avec mélange des paramètres
for test_case in "${test_cases[@]}"; do
    # On sépare les paramètres
    test_case_array=($test_case)

    # Log des arguments avant shuffle
    echo -e "${BLUE}Arguments avant le shuffle : ${test_case_array[*]}${NC}"

    # On mélange les paramètres avec la fonction shuffle_args
    shuffled_test_case=$(shuffle_args "${test_case_array[@]}")

    # Log des arguments après shuffle
    # echo -e "${BLUE}Arguments après le shuffle : $shuffled_test_case${NC}" # commenté car déjà affiché en dessous

    echo -e "${YELLOW}Exécution du test : ./simulateur $shuffled_test_case${NC}"

    java -cp "$BIN_DIR:$JAR_FILES" simulateur.Simulateur $shuffled_test_case

    if [ $? -ne 0 ]; then
        echo -e "${RED}Échec du test : $shuffled_test_case${NC}"
        ((failed_tests++))
    else
        echo -e "${GREEN}Test réussi : $shuffled_test_case${NC}"
    fi
done

# Résumé des résultats des tests
if [ "$failed_tests" -ne 0 ]; then
    echo -e "\n${RED}$failed_tests tests échoués sur ${#test_cases[@]}${NC}"
    exit 1
else
    echo -e "${GREEN}Tous les tests sont passés avec succès${NC}"
fi
